/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package foodorderingsystem;

import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manreen
 */
public class DL_CustomerReview extends javax.swing.JFrame {

    private String username;

    public DL_CustomerReview() {
        Login login = new Login();
        username = login.getUsername();
        initComponents();
        loadTable();
        
        
        ImageIcon img = new ImageIcon(getClass().getResource("/files/back.png"));
        Image scaledImage = img.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);//with 200px,height 200px
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DL_DashboardPage c = new DL_DashboardPage();
                c.setVisible(true);
                dispose();
            }
        });

        back.setText("");
        back.setIcon(scaledIcon);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_CustomerReview = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 193));

        jLabel1.setFont(new java.awt.Font("Sitka Text", 0, 36)); // NOI18N
        jLabel1.setText("Customer Review");

        jTable_CustomerReview.setBackground(new java.awt.Color(161, 204, 153));
        jTable_CustomerReview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order ID", "Delivery Runner Comment", "Date"
            }
        ));
        jScrollPane1.setViewportView(jTable_CustomerReview);

        jLabel2.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        jLabel2.setText("Select Date For Filter:");

        date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datePropertyChange(evt);
            }
        });

        back.setText("jLabel6");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(327, 327, 327))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(back))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePropertyChange
        if ("date".equals(evt.getPropertyName())) {
            Date selectedDate = date.getDate();
            if (selectedDate != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String formattedDate = sdf.format(selectedDate);

                filterTableByRunnerAndDate(formattedDate);
            }
        }
    }//GEN-LAST:event_datePropertyChange

    private void loadTable() {
        DefaultTableModel model = (DefaultTableModel) jTable_CustomerReview.getModel();
        model.setRowCount(0);

        String orderFile = "order.txt";
        String feedbackFile = "feedback.txt";

        List<String> orderIds = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(orderFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length >= 13) {
                    String runnerId = parts[11]; // Runner ID
                    String orderId = parts[0];   // Order ID
                    if (runnerId.equals(username)) {
                        orderIds.add(orderId);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading order.txt: " + e.getMessage());
            return;
        }

        if (orderIds.isEmpty()) {
            System.out.println("No orders found for runner ID: " + username);
            return;
        }

        Map<String, String[]> feedbackMap = new HashMap<>();

        try (BufferedReader br = new BufferedReader(new FileReader(feedbackFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length == 9) {
                    String orderId = parts[0];   // Order ID
                    String feedback = parts[6];  // Feedback
                    String dateTxt = parts[8];

                    feedbackMap.put(orderId, new String[]{feedback, dateTxt});
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading feedback.txt: " + e.getMessage());
            return;
        }

        // 遍历 orderId 并填充表格
        System.out.println("Feedback for Runner ID: " + username);
        for (String orderId : orderIds) {
            if (feedbackMap.containsKey(orderId)) {
                String[] feedbackData = feedbackMap.get(orderId);
                model.addRow(new Object[]{orderId, feedbackData[0], feedbackData[1]});
            }
        }
    }

    private void filterTableByRunnerAndDate(String selectedDate) {
        DefaultTableModel model = (DefaultTableModel) jTable_CustomerReview.getModel();
        model.setRowCount(0);

        Map<String, List<String>> runnerOrders = new HashMap<>();
        File orderFile = new File("order.txt");

        if (orderFile.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(orderFile))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] data = line.split("\\|");
                    if (data.length >= 12) {
                        String orderId = data[0].trim();
                        String runnerId = data[11].trim();

                        runnerOrders.computeIfAbsent(runnerId, k -> new ArrayList<>()).add(orderId);
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error loading orders: " + e.getMessage());
                e.printStackTrace();
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "File not found: " + orderFile.getAbsolutePath());
            return;
        }

        if (!runnerOrders.containsKey(username)) {
            JOptionPane.showMessageDialog(this, "No orders found for Runner ID: " + username);
            return;
        }

        List<String> validOrders = runnerOrders.get(username);

        File feedbackFile = new File("feedback.txt");
        if (!feedbackFile.exists()) {
            JOptionPane.showMessageDialog(this, "File not found: " + feedbackFile.getAbsolutePath());
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(feedbackFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\\|");
                if (data.length == 9) {
                    String orderId = data[0].trim();
                    String reviewDate = data[8].trim();
                    String feedback = data[6].trim();
                    if (validOrders.contains(orderId) && reviewDate.equals(selectedDate)) {
                        model.addRow(new Object[]{orderId, feedback, reviewDate});
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading feedback: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_CustomerReview;
    // End of variables declaration//GEN-END:variables
}
