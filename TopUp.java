/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package foodorderingsystem;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 * @author HP
 */
public class TopUp extends javax.swing.JFrame {

    /**
     * Creates new form TopUp
     */
    Receipt r = new Receipt();

    public TopUp() {
        initComponents();
        Login login = new Login();
        System.out.println(login.getUsername());
        ImageIcon img = new ImageIcon(getClass().getResource("/files/back.png"));
        Image scaledImage = img.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);//with 200px,height 200px
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                MenuForm a = new MenuForm();
                a.setVisible(true);
                dispose();
            }
        });

        back.setText("");
        back.setIcon(scaledIcon);
        setLocationRelativeTo(null);
        panelChange();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        custId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        paymentPanel = new javax.swing.JPanel();
        cardTopUpBtn = new javax.swing.JButton();
        onlineTopUpBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 149, 50));

        jLabel1.setFont(new java.awt.Font("Sitka Text", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TOP UP ");

        jLabel2.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel2.setText("Customer Id :");

        custId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        custId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custIdActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel4.setText("Payment Method :");

        paymentPanel.setBackground(new java.awt.Color(255, 175, 101));

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 293, Short.MAX_VALUE)
        );

        cardTopUpBtn.setBackground(new java.awt.Color(255, 123, 0));
        cardTopUpBtn.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        cardTopUpBtn.setText("Credit/Debit Card");
        cardTopUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardTopUpBtnActionPerformed(evt);
            }
        });

        onlineTopUpBtn.setBackground(new java.awt.Color(255, 123, 0));
        onlineTopUpBtn.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        onlineTopUpBtn.setText("Online Banking");
        onlineTopUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineTopUpBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel3.setText("Balance:");

        balance.setEditable(false);
        balance.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceActionPerformed(evt);
            }
        });

        back.setText("jLabel4");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(back)))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(custId, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(onlineTopUpBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cardTopUpBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(back)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(custId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(87, 87, 87)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(onlineTopUpBtn)
                    .addComponent(cardTopUpBtn))
                .addGap(24, 24, 24)
                .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cardTopUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardTopUpBtnActionPerformed

    }//GEN-LAST:event_cardTopUpBtnActionPerformed

    private void onlineTopUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineTopUpBtnActionPerformed

    }//GEN-LAST:event_onlineTopUpBtnActionPerformed

    private void custIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custIdActionPerformed

        searchRecord();
    }//GEN-LAST:event_custIdActionPerformed

    private void balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceActionPerformed

    }//GEN-LAST:event_balanceActionPerformed

    private JPanel cardPanel;

    public void panelChange() {
        cardPanel = new JPanel(new CardLayout());

        JPanel onlinePanel = createOnlineTopUpPanel();
        JPanel cardPaymentPanel = createCardTopUpPanel();

        cardPanel.add(onlinePanel, "Online");
        cardPanel.add(cardPaymentPanel, "Card");

        onlineTopUpBtn.addActionListener(e -> showPanel("Online"));
        cardTopUpBtn.addActionListener(e -> showPanel("Card"));

        paymentPanel.setLayout(new BorderLayout());
        paymentPanel.add(cardPanel, BorderLayout.CENTER);
        paymentPanel.revalidate();
        paymentPanel.repaint();

    }

    private void showPanel(String name) {
        CardLayout layout = (CardLayout) cardPanel.getLayout();
        layout.show(cardPanel, name);
    }

    private boolean searchRecord() {
        boolean found = false;
        try (BufferedReader br = new BufferedReader(new FileReader("Balance.txt"))) {
            String line;

            while ((line = br.readLine()) != null) {
                String[] columns = line.split("\\|");
                if (columns.length >= 2 && columns[0].trim().equals(custId.getText())) {
                    balance.setText(columns[1]);
                    found = true;
                }

            }
            if (!found) {
                JOptionPane.showMessageDialog(null, "ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
                custId.setText("");
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "An error occurred while reading the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return found;
    }

    private JPanel createOnlineTopUpPanel() {
        JPanel tittlePanel = new JPanel();
        JPanel panel = new JPanel(new GridLayout(2, 1));

        tittlePanel.add(new JLabel("Online Banking Top Up"));

        panel.add(new JLabel("Select a bank:"));
        String[] bankNames = {
            "Select Bank", "Maybank", "CIMB", "Public Bank", "RHB Bank", "Hong Leong Bank", "BSN", "UOB", "OCBC"
        };
        JComboBox<String> bankName = new JComboBox<>(bankNames);
        panel.add(bankName);

        bankName.addActionListener(e -> {
            if (custId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter your ID");

            } else {
                boolean found = searchRecord();

                if (found == true) {
                    String selectBank = (String) bankName.getSelectedItem();
                    if (!"Select Bank".equals(selectBank)) {
                        showBankDetails(selectBank);
                    }
                }

            }

        });

        panel.add(tittlePanel, BorderLayout.NORTH);
        return panel;
    }

    private void showBankDetails(String bankName) {
        JDialog dialog = new JDialog(this, bankName + " Page", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(400, 400);
        dialog.setLocationRelativeTo(this);

        JPanel iconDisplay = new JPanel();
        String[] photoName = {
            "Maybank", "CIMB", "Public Bank", "RHB Bank", "Hong Leong Bank", "BSN", "UOB", "OCBC"
        };

        String[] color = {
            "255,199,0", "225,035,025", "223,009,019", "111,206,228", "000,023,072", "0,160,174",
            "1,027,106", "237,027,036"
        };

        String photoPath = "/photo/photoName.jpg";
        Color backgroundColor = java.awt.Color.WHITE;

        for (int i = 0; i < photoName.length; i++) {
            if (bankName.equals(photoName[i])) {
                photoPath = "/files/" + photoName[i] + ".jpg";
                String[] rgb = color[i].split(",");
                backgroundColor = new java.awt.Color(Integer.parseInt(rgb[0]), Integer.parseInt(rgb[1]), Integer.parseInt(rgb[2]));
                break;
            }
        }

        ImageIcon oriIcon = new ImageIcon(getClass().getResource(photoPath));
        Image originalImage = oriIcon.getImage();

        JLabel label = new JLabel(oriIcon);
        iconDisplay.add(label, BorderLayout.CENTER);

        iconDisplay.addComponentListener(new java.awt.event.ComponentAdapter() {
            @Override
            public void componentResized(java.awt.event.ComponentEvent evt) {
                int width = iconDisplay.getWidth();
                int height = 150;
                Image newImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
                ImageIcon newIcon = new ImageIcon(newImage);
                label.setIcon(newIcon);
                iconDisplay.revalidate();
                iconDisplay.repaint();
            }
        });

        JPanel formPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        formPanel.add(new JLabel("Account Number:"));
        JTextField accNum = new JTextField();
        formPanel.add(accNum);

        accNum.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                int accNumLength = 0;

                switch (bankName) {
                    case "Maybank":
                    case "CIMB":
                        accNumLength = 12;
                        break;
                    case "Public Bank":
                    case "UOB":
                    case "OCBC":
                    case "Hong Leong":
                        accNumLength = 10;
                        break;
                    case "RHB":
                    case "BSN":
                        accNumLength = 14;
                        break;
                    default:
                        break;
                }

                if (accNum.getText().length() >= accNumLength) {
                    e.consume();
                }
            }
        });

        formPanel.add(new JLabel("Amount:"));
        JTextField amount = new JTextField();
        formPanel.add(amount);

        formPanel.add(new JLabel("Password:"));
        JPasswordField password = new JPasswordField();
        formPanel.add(password);

        formPanel.add(new JLabel("Reference (Optional):"));
        JTextArea reference = new JTextArea(5, 20);
        formPanel.add(reference);

        JButton confirmButton = new JButton("Confirm");
        confirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String passwordToString = new String(password.getPassword());
                if (accNum.getText().isEmpty() || amount.getText().isEmpty() || passwordToString.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                    Double currentBalance = 0.00;
                    Double newBalance = 0.00;
                    StringBuilder updatedData = new StringBuilder();

                    try (BufferedReader br = new BufferedReader(new FileReader("Balance.txt"))) {
                        String line;
                        boolean found = false;
                        while ((line = br.readLine()) != null) {
                            String[] columns = line.split("\\|");
                            if (columns.length >= 2 && columns[0].trim().equals(custId.getText())) {
                                currentBalance = Double.valueOf(columns[1]);
                                newBalance = currentBalance + Double.valueOf(amount.getText());
                                updatedData.append(columns[0]).append("|").append(newBalance.toString()).append("\n");
                                found = true;
                            } else {
                                updatedData.append(line).append("\n");
                            }
                        }

                        try (BufferedWriter bw = new BufferedWriter(new FileWriter("Balance.txt"))) {
                            bw.write(updatedData.toString());
                            JOptionPane.showMessageDialog(null, "Top Up Successfully !");
                            r.addTopUpReceipt(custId.getText(), Double.parseDouble(amount.getText()), currentBalance, newBalance);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(null, "An error occurred while writing to the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "An error occurred while reading the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    dialog.dispose();
                }
            }
        });
        formPanel.setBackground(backgroundColor);
        for (Component component : formPanel.getComponents()) {
            if (component instanceof JLabel) {
                ((JLabel) component).setForeground(Color.WHITE);
                ((JLabel) component).setFont(new Font("Georgia", Font.BOLD, 15));
            }
        }

        dialog.add(iconDisplay, BorderLayout.NORTH);
        dialog.add(formPanel, BorderLayout.CENTER);
        dialog.add(confirmButton, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private JPanel createCardTopUpPanel() {
        JPanel panel = new JPanel(new GridLayout(6, 2));

        panel.add(new JLabel("Card Number:"));
        JTextField cardNum = new JTextField();
        panel.add(cardNum);

        cardNum.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (cardNum.getText().length() >= 16) {
                    e.consume();
                }
                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        JPanel expPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panel.add(new JLabel("Expiry Date (MM/YY):"));
        JTextField monthTxt = new JTextField(2);
        expPanel.add(monthTxt);
        expPanel.add(new JLabel("/"));
        JTextField yearTxt = new JTextField(4);
        expPanel.add(yearTxt);
        panel.add(expPanel);

        monthTxt.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (!Character.isDigit(e.getKeyChar()) || monthTxt.getText().length() >= 2) {
                    e.consume();
                }
                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        yearTxt.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (!Character.isDigit(e.getKeyChar()) || yearTxt.getText().length() >= 4) {
                    e.consume();
                }
                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        panel.add(new JLabel("CVV:"));
        JTextField cvv = new JTextField();
        panel.add(cvv);

        cvv.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (cvv.getText().length() >= 3) {
                    e.consume();
                }
                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        panel.add(new JLabel("Amount:  RM"));
        JTextField amount = new JTextField();
        panel.add(amount);

        amount.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {

                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        panel.add(new JLabel("Name Of Card:"));
        JTextField cardName = new JTextField();
        panel.add(cardName);

        cardName.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {

                if (custId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter your ID");

                }
            }
        });

        JButton confirmButton = new JButton("Confirm");
        panel.add(confirmButton);

        confirmButton.addActionListener(e -> {
            StringBuilder errorMessage = new StringBuilder();

            if (cardNum.getText().isEmpty() || monthTxt.getText().isEmpty() || yearTxt.getText().isEmpty()
                    || cvv.getText().isEmpty() || cardName.getText().isEmpty()) {
                errorMessage.append("Please fill all required fields!\n");
            }

            try {
                int monthValue = Integer.parseInt(monthTxt.getText());
                if (monthValue < 1 || monthValue > 12) {
                    errorMessage.append("Invalid month. Please enter a value between 01 and 12.\n");
                }
            } catch (NumberFormatException ex) {
                errorMessage.append("Invalid month format. Please enter digits only.\n");
            }

            try {
                int yearValue = Integer.parseInt(yearTxt.getText());
                int currentYear = java.time.Year.now().getValue();
                if (yearValue < currentYear) {
                    errorMessage.append("Your card is expired.\n");
                }
            } catch (NumberFormatException ex) {
                errorMessage.append("Invalid year format. Please enter digits only.\n");
            }

            if (cardNum.getText().length() != 16) {
                errorMessage.append("Card number must be 16 digits.\n");
            }

            if (cvv.getText().length() != 3) {
                errorMessage.append("CVV must be 3 digits.\n");
            }

            if (errorMessage.length() > 0) {
                JOptionPane.showMessageDialog(null, errorMessage.toString(), "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                Double currentBalance = 0.00;
                Double newBalance = 0.00;
                StringBuilder updatedData = new StringBuilder();

                try (BufferedReader br = new BufferedReader(new FileReader("Balance.txt"))) {
                    String line;
                    boolean found = false;
                    while ((line = br.readLine()) != null) {
                        String[] columns = line.split("\\|");
                        if (columns.length >= 2 && columns[0].trim().equals(custId.getText())) {
                            currentBalance = Double.valueOf(columns[1]);
                            newBalance = currentBalance + Double.valueOf(amount.getText());
                            updatedData.append(columns[0]).append("|").append(newBalance.toString()).append("\n");
                            found = true;
                        } else {
                            updatedData.append(line).append("\n");
                        }
                    }

                    try (BufferedWriter bw = new BufferedWriter(new FileWriter("Balance.txt"))) {
                        bw.write(updatedData.toString());
                        JOptionPane.showMessageDialog(null, "Top Up Successfully !");
                        r.addTopUpReceipt(custId.getText(), Double.parseDouble(amount.getText()), currentBalance, newBalance);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "An error occurred while writing to the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TopUp.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TopUp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        );

        return panel;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JTextField balance;
    private javax.swing.JButton cardTopUpBtn;
    private javax.swing.JTextField custId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton onlineTopUpBtn;
    private javax.swing.JPanel paymentPanel;
    // End of variables declaration//GEN-END:variables
}
