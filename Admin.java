/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package foodorderingsystem;

import domain.Runner;
import domain.Vendor;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        getContentPane().setBackground(new Color(200, 249, 190)); // Set background color
        Login login = new Login();
        System.out.println(login.getUsername());
        ImageIcon img = new ImageIcon(getClass().getResource("/files/back.png"));
        Image scaledImage = img.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);//with 200px,height 200px
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                AdminChoose adminchoose = new AdminChoose();
                adminchoose.setVisible(true);
                dispose();
            }
        });

        back.setText("");
        back.setIcon(scaledIcon);
        setLocationRelativeTo(null);
        panelChange();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        vendorButton = new javax.swing.JButton();
        runnerButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        btnPanel = new javax.swing.JPanel();
        label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 193));

        jLabel1.setFont(new java.awt.Font("Sitka Text", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User Registration");

        back.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28))
        );

        buttonPanel.setBackground(new java.awt.Color(204, 255, 193));

        vendorButton.setBackground(new java.awt.Color(77, 214, 77));
        vendorButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        vendorButton.setText("Vendor");
        vendorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vendorButtonActionPerformed(evt);
            }
        });

        runnerButton.setBackground(new java.awt.Color(77, 214, 77));
        runnerButton.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        runnerButton.setText("Runner");
        runnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runnerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addComponent(vendorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runnerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vendorButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(runnerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        infoPanel.setBackground(new java.awt.Color(191, 255, 178));

        javax.swing.GroupLayout btnPanelLayout = new javax.swing.GroupLayout(btnPanel);
        btnPanel.setLayout(btnPanelLayout);
        btnPanelLayout.setHorizontalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        btnPanelLayout.setVerticalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                .addGap(0, 297, Short.MAX_VALUE)
                .addComponent(btnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        label.setFont(new java.awt.Font("Sitka Text", 0, 24)); // NOI18N
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("Vendor Registration");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(226, 226, 226))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(label)
                .addGap(18, 18, 18)
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vendorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vendorButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vendorButtonActionPerformed

    private void runnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runnerButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runnerButtonActionPerformed

    private JPanel cardPanel;

    public void panelChange() {
        cardPanel = new JPanel(new CardLayout());

        JPanel vendorPanel = createVendorPanel();
        JPanel runnerPanel = createRunnerPanel();

        cardPanel.add(vendorPanel, "Vendor");
        cardPanel.add(runnerPanel, "Runner");

        vendorButton.addActionListener(e -> showPanel("Vendor"));
        runnerButton.addActionListener(e -> showPanel("Runner"));

        infoPanel.setLayout(new BorderLayout());
        infoPanel.add(cardPanel, BorderLayout.CENTER);
        infoPanel.revalidate();
        infoPanel.repaint();

    }

    private void showPanel(String name) {
        CardLayout layout = (CardLayout) cardPanel.getLayout();
        layout.show(cardPanel, name);

        // Update label based on the panel being shown
        if (name.equals("Vendor")) {
            label.setText("Vendor Registration");
        } else if (name.equals("Runner")) {
            label.setText("Runner Registration");
        }
    }

    Vendor vendor = new Vendor();

    private JPanel createVendorPanel() {

        JPanel vendorPanel = new JPanel(new BorderLayout());
        Font font = new Font("Viner Hand ITC", Font.BOLD, 22);
        System.out.println(label.getText());

        label.setFont(font);

        JPanel leftPanel = new JPanel(new GridLayout(6, 2));
        JPanel rightPanel = new JPanel(new GridLayout(3, 2));
        JPanel infoPanel = new JPanel(new GridLayout(1, 2));
        JPanel btnPanel = new JPanel(new GridLayout(1, 3));

        JButton createBtn = new JButton("CREATE");
        JButton updateBtn = new JButton("UPDATE");
        JButton deleteBtn = new JButton("DELETE");

        btnPanel.add(createBtn);
        btnPanel.add(updateBtn);
        btnPanel.add(deleteBtn);

        infoPanel.add(new JLabel("Search Vendor IC:"));
        JTextField identityCard = new JTextField();
        infoPanel.add(identityCard);
        // Left panel fields

        leftPanel.add(new JLabel("Full Name:"));
        JTextField name = new JTextField();
        leftPanel.add(name);

        leftPanel.add(new JLabel("Identity Card Number:"));
        JTextField ic = new JTextField();
        leftPanel.add(ic);

        leftPanel.add(new JLabel("Email Address:"));
        JTextField email = new JTextField();
        leftPanel.add(email);

        leftPanel.add(new JLabel("Phone Number:"));
        JTextField phone = new JTextField();
        leftPanel.add(phone);

        leftPanel.add(new JLabel("Address:"));
        JTextField address = new JTextField();
        leftPanel.add(address);

        leftPanel.add(new JLabel("Password:"));
        JPasswordField password = new JPasswordField();
        leftPanel.add(password);

        rightPanel.add(new JLabel("Date of Birth (YYYY-MM-DD):"));
        JTextField dob = new JTextField();
        rightPanel.add(dob);

        rightPanel.add(new JLabel("Gender:"));
        JComboBox<String> gender = new JComboBox<>(new String[]{"Select", "Male", "Female"});
        rightPanel.add(gender);

        JTextField vendorId = new JTextField(20);
        JButton btnGenerateId = new JButton("Click here to generate vendor id");
        rightPanel.add(btnGenerateId);
        rightPanel.add(vendorId);

        vendorId.setEditable(false);

        btnGenerateId.addActionListener(e -> {
            String newVendorId = vendor.generateId();
            if (newVendorId != null) {
                vendorId.setText(newVendorId);
            } else {
                JOptionPane.showMessageDialog(this, "Error generating Vendor ID", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Add KeyListener to identityCard for search
        identityCard.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) { // Trigger on Enter key
                    boolean recordFound = false;
                    String enteredIc = identityCard.getText().trim(); // Remove leading/trailing spaces

                    try (BufferedReader br = new BufferedReader(new FileReader("vendorRegistration.txt"))) {
                        String line;
                        while ((line = br.readLine()) != null) {

                            String[] columns = line.split("\\|");

                            if (columns.length >= 9 && columns[1].trim().equals(enteredIc.trim())) {
                                vendor.setName(columns[0]);
                                vendor.setIc(columns[1]);
                                vendor.setEmail(columns[2]);
                                vendor.setPhoneNum(columns[3]);
                                vendor.setAddres(columns[4]);
                                vendor.setDob(columns[5]);
                                vendor.setGender(columns[6]);
                                vendor.setPassword(columns[7]);
                                vendor.setId(columns[8]);

                                name.setText(vendor.getName());
                                ic.setText(vendor.getIc());
                                email.setText(vendor.getEmail());
                                phone.setText(vendor.getPhoneNum());
                                address.setText(vendor.getAddress());
                                dob.setText(vendor.getDob());
                                gender.setSelectedItem(vendor.getGender());
                                vendorId.setText(vendor.getId());
                                password.setText(vendor.getPassword());
                                recordFound = true;
                                break; // Stop searching after finding the first match
                            }
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "An error occurred while reading the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    if (recordFound == false) {
                        JOptionPane.showMessageDialog(null, "No Record Found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("");
                        password.setText("");
                    }
                }
            }
        });

        createBtn.addActionListener(e -> {
            String vendorName = name.getText().trim();
            String vendorIc = ic.getText().trim();
            String vendorEmail = email.getText().trim();
            String vendorPhone = phone.getText().trim();
            String vendorAddress = address.getText().trim();
            String vendorDob = dob.getText().trim();
            String vendorPassword = new String(password.getPassword()).trim();
            String vendorGender = (String) gender.getSelectedItem();

            // Check if all required fields are filled
            if (vendorName.isEmpty() || vendorIc.isEmpty() || vendorEmail.isEmpty() || vendorPhone.isEmpty()
                    || vendorAddress.isEmpty() || vendorDob.isEmpty() || vendorPassword.isEmpty() || vendorGender.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create Vendor object to validate inputs
            Vendor vendor = new Vendor();

            // Perform input checking using Vendor's inputChecking method
            String validationMessage = vendor.inputChecking(vendorName, vendorIc, vendorEmail, vendorPhone, vendorAddress, vendorDob, vendorPassword, vendorGender);

            if (validationMessage != null) {
                JOptionPane.showMessageDialog(this, validationMessage, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // If all checks pass, proceed with creating the vendor
            vendor.setName(vendorName);
            vendor.setIc(vendorIc);
            vendor.setEmail(vendorEmail);
            vendor.setPhoneNum(vendorPhone);
            vendor.setAddres(vendorAddress);
            vendor.setDob(vendorDob);
            vendor.setGender(vendorGender);
            vendor.setPassword(vendorPassword);
            vendor.setId(vendorId.getText());

            // Proceed with vendor registration logic (e.g., check for existing records, save to file, etc.)
            boolean recordFound = vendor.searchRecord(vendor.getIc());
            if (!recordFound) {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter("vendorRegistration.txt", true))) {
                    String data = vendor.getName() + "|" + vendor.getIc() + "|" + vendor.getEmail() + "|" + vendor.getPhoneNum() + "|"
                            + vendor.getAddress() + "|" + vendor.getDob() + "|" + vendor.getGender() + "|" + vendor.getPassword() + "|" + vendor.getId();
                    bw.write(data);
                    bw.newLine();
                    JOptionPane.showMessageDialog(null, "Registration Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    identityCard.setText("");
                    name.setText("");
                    ic.setText("");
                    email.setText("");
                    phone.setText("");
                    address.setText("");
                    dob.setText("");
                    gender.setSelectedItem("Select");
                    vendorId.setText("");
                    password.setText("");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "An error occurred while saving data.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Record Exists!", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        deleteBtn.addActionListener(e -> {
            try {
                String enteredIc = identityCard.getText().trim(); // Get IC from the search field

                if (enteredIc.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter an IC to delete.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Load all lines from the file
                List<String> vendorLines = Files.readAllLines(Paths.get("vendorRegistration.txt"));
                List<String> updatedLines = new ArrayList<>();
                boolean found = false;

                // Iterate through all lines to find the matching IC
                for (String line : vendorLines) {
                    String[] vendorParts = line.split("\\|");

                    // Assuming the IC is the second field (index 1)
                    if (vendorParts.length > 1 && vendorParts[1].trim().equals(enteredIc)) {
                        found = true; // Mark record as found
                    } else {
                        updatedLines.add(line); // Add non-matching lines to the updated list
                    }
                }

                if (found) {
                    int option = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to delete this record?",
                            "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (option == JOptionPane.YES_OPTION) {
                        Files.write(Paths.get("vendorRegistration.txt"), updatedLines);
                        JOptionPane.showMessageDialog(null, "Vendor record deleted successfully.",
                                "Success", JOptionPane.INFORMATION_MESSAGE);

                        identityCard.setText("");
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("Select");
                        vendorId.setText("");
                        password.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given IC.",
                            "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "An error occurred while processing the file: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        updateBtn.addActionListener(e -> {
            try {
                String enteredIc = identityCard.getText().trim();

                if (enteredIc.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter an IC to modify.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                vendor.setName(name.getText());
                vendor.setIc(ic.getText());
                vendor.setEmail(email.getText());
                vendor.setPhoneNum(phone.getText());
                vendor.setAddres(address.getText());
                vendor.setDob(dob.getText());
                vendor.setGender(gender.getSelectedItem().toString());
                vendor.setPassword(new String(password.getPassword()));

                if (vendor.getName().isEmpty() || vendor.getIc().isEmpty() || vendor.getEmail().isEmpty() || vendor.getPhoneNum().isEmpty()
                        || vendor.getAddress().isEmpty() || vendor.getGender().equals("Select") || vendor.getDob().isEmpty() || vendor.getPassword().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                List<String> vendorLines = Files.readAllLines(Paths.get("vendorRegistration.txt"));
                List<String> updatedLines = new ArrayList<>();
                boolean found = false;

                for (String line : vendorLines) {
                    String[] vendorParts = line.split("\\|");

                    if (vendorParts.length > 7 && vendorParts[1].trim().equals(enteredIc)) {
                        found = true;

                        // Create the updated record
                        String updatedRecord = vendor.getName() + "|" + vendor.getIc() + "|" + vendor.getEmail() + "|" + vendor.getPhoneNum() + "|"
                                + vendor.getAddress() + "|" + vendor.getDob() + "|" + vendor.getGender() + "|" + vendor.getPassword() + "|" + vendorParts[8].trim();
                        updatedLines.add(updatedRecord);
                    } else {
                        updatedLines.add(line);
                    }
                }

                if (found) {
                    if (ic.getText().equals(enteredIc)) {
                        Files.write(Paths.get("vendorRegistration.txt"), updatedLines);
                        JOptionPane.showMessageDialog(null, "Record updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                        // Clear fields after update
                        identityCard.setText("");
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("Select");
                        vendorId.setText("");
                        password.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "IC cannot be modified.", "Update Record Fail", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given IC.", "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "An error occurred while processing the file: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        vendorPanel.add(infoPanel, BorderLayout.NORTH);
        vendorPanel.add(this.btnPanel.add(btnPanel), BorderLayout.SOUTH);
        vendorPanel.add(leftPanel, BorderLayout.CENTER);
        vendorPanel.add(rightPanel, BorderLayout.EAST);

        return vendorPanel;
    }

    Runner runner = new Runner();

    private JPanel createRunnerPanel() {

        JPanel runnerPanel = new JPanel(new BorderLayout());
        Font font = new Font("Stika", Font.BOLD, 20);
        System.out.println(label.getText());
        label.setFont(font);

        // Panels for layout
        JPanel leftPanel = new JPanel(new GridLayout(6, 2));
        JPanel rightPanel = new JPanel(new GridLayout(6, 2));
        JPanel infoPanel = new JPanel(new GridLayout(1, 2));
        JPanel btnPanel = new JPanel(new GridLayout(1, 3));

        JButton createBtn = new JButton("CREATE");
        JButton updateBtn = new JButton("UPDATE");
        JButton deleteBtn = new JButton("DELETE");

        btnPanel.add(createBtn);
        btnPanel.add(updateBtn);
        btnPanel.add(deleteBtn);

        // Search field
        infoPanel.add(new JLabel("Search Runner IC:"));
        JTextField identityCard = new JTextField();
        infoPanel.add(identityCard);

        // Left panel fields
        leftPanel.add(new JLabel("Full Name:"));
        JTextField name = new JTextField();
        leftPanel.add(name);

        leftPanel.add(new JLabel("Identity Card Number:"));
        JTextField ic = new JTextField();
        leftPanel.add(ic);

        leftPanel.add(new JLabel("Email Address:"));
        JTextField email = new JTextField();
        leftPanel.add(email);

        leftPanel.add(new JLabel("Phone Number:"));
        JTextField phone = new JTextField();
        leftPanel.add(phone);

        leftPanel.add(new JLabel("Address:"));
        JTextField address = new JTextField();
        leftPanel.add(address);

        leftPanel.add(new JLabel("Password:"));
        JPasswordField password = new JPasswordField();
        leftPanel.add(password);

        rightPanel.add(new JLabel("Date of Birth (YYYY-MM-DD):"));
        JTextField dob = new JTextField();
        rightPanel.add(dob);

        // Right panel fields
        rightPanel.add(new JLabel("Gender:"));
        JComboBox<String> gender = new JComboBox<>(new String[]{"Select", "Male", "Female"});
        rightPanel.add(gender);

        rightPanel.add(new JLabel("Vehicle Type:"));
        String[] vehicleTypes = {"Select", "Moto", "Car"};
        JComboBox<String> vehicleType = new JComboBox<>(vehicleTypes);
        rightPanel.add(vehicleType);

        rightPanel.add(new JLabel("Vehicle Registration Number:"));
        JTextField vehicleNumber = new JTextField();
        rightPanel.add(vehicleNumber);

        rightPanel.add(new JLabel("Vehicle Model:"));
        JTextField vehicleModel = new JTextField();
        rightPanel.add(vehicleModel);

        JTextField runnerId = new JTextField(20);
        JButton btnGenerateId = new JButton("Click here to generate runner id");
        rightPanel.add(btnGenerateId);
        rightPanel.add(runnerId);

        btnGenerateId.addActionListener(e -> {
            String newRunnerId = runner.generateId();
            if (newRunnerId != null) {
                runnerId.setText(newRunnerId);
            } else {
                JOptionPane.showMessageDialog(this, "Error generating Runner ID", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        identityCard.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    boolean recordFound = false;
                    String enteredIc = identityCard.getText().trim();

                    try (BufferedReader br = new BufferedReader(new FileReader("runnerRegistration.txt"))) {
                        String line;
                        while ((line = br.readLine()) != null) {
                            String[] columns = line.split("\\|");
                            if (columns.length >= 12 && columns[1].trim().equals(enteredIc)) {
                                // Auto-fill fields
                                runner.setName(columns[0]);
                                runner.setIc(columns[1]);
                                runner.setEmail(columns[2]);
                                runner.setPhoneNum(columns[3]);
                                runner.setAddres(columns[4]);
                                runner.setDob(columns[5]);
                                runner.setGender(columns[6]);
                                runner.setVehicleType(columns[7]);
                                runner.setVehicleRegNum(columns[8]);
                                runner.setVehicleModel(columns[9]);
                                runner.setPassword(columns[10]);
                                runner.setId(columns[11]);

                                name.setText(runner.getName());
                                ic.setText(runner.getIc());
                                email.setText(runner.getEmail());
                                phone.setText(runner.getPhoneNum());
                                address.setText(runner.getAddress());
                                dob.setText(runner.getDob());
                                gender.setSelectedItem(runner.getGender());
                                vehicleType.setSelectedItem(runner.getVehicleType());
                                vehicleNumber.setText(runner.getVehicleRegNum());
                                vehicleModel.setText(runner.getVehicleModel());
                                runnerId.setText(runner.getId());
                                password.setText(runner.getPassword());
                                recordFound = true;
                                break; // Stop searching after finding the first match
                            }
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "An error occurred while reading the file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    // Display appropriate message
                    if (!recordFound) {
                        JOptionPane.showMessageDialog(null, "No Record Found", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        });
        for (Component component : getContentPane().getComponents()) {
            if (component instanceof JButton) {
                JButton button = (JButton) component;
                button.setBackground(new Color(77, 214, 77));
                button.setForeground(Color.WHITE);
                button.setOpaque(true);
                button.setBorderPainted(false);
                button.setFont(new Font("Rockwell", Font.PLAIN, 16));
            }
        }
        createBtn.addActionListener(e -> {

            runner.setName(name.getText());
            runner.setIc(ic.getText());
            runner.setEmail(email.getText());
            runner.setPhoneNum(phone.getText());
            runner.setAddres(address.getText());
            runner.setDob(dob.getText());
            runner.setGender(gender.getSelectedItem().toString());
            runner.setVehicleType(vehicleType.getSelectedItem().toString());
            runner.setVehicleRegNum(vehicleNumber.getText());
            runner.setVehicleModel(vehicleModel.getText());
            runner.setId(runnerId.getText());

            runner.setPassword(new String(password.getPassword()));

            // Validate input
            if (runner.getName().isEmpty() || runner.getIc().isEmpty() || runner.getEmail().isEmpty() || runner.getPhoneNum().isEmpty()
                    || runner.getAddress().isEmpty() || runner.getGender().equals("Select") || runner.getDob().isEmpty() || runner.getVehicleType().equals("Select")
                    || runner.getVehicleRegNum().isEmpty() || runner.getVehicleModel().isEmpty() || runner.getId().isEmpty() || runner.getPassword().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                String validationMessage = runner.inputChecking(name.getText(), ic.getText(), email.getText(), phone.getText(), address.getText(), dob.getText(), password.getPassword().toString(), gender.getSelectedItem().toString(), vehicleType.getSelectedItem().toString(), vehicleNumber.getText(), vehicleModel.getText().toString());
                if (validationMessage != null) {
                    JOptionPane.showMessageDialog(this, validationMessage, "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                boolean recordFound = runner.searchRecord(runner.getIc());

                if (!recordFound) {
                    // Append to the file
                    try (BufferedWriter bw = new BufferedWriter(new FileWriter("runnerRegistration.txt", true))) {
                        // Writing the data to the file
                        String data = runner.getName() + "|" + runner.getIc() + "|" + runner.getEmail() + "|" + runner.getPhoneNum() + "|"
                                + runner.getAddress() + "|" + runner.getDob() + "|" + runner.getGender() + "|" + runner.getVehicleType() + "|" + runner.getVehicleRegNum()
                                + "|" + runner.getVehicleModel() + "|" + runner.getPassword() + "|" + runner.getId();
                        bw.write(data);
                        bw.newLine();
                        identityCard.setText("");
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("Select");
                        vehicleType.setSelectedItem("Select");
                        vehicleNumber.setText("");
                        vehicleModel.setText("");
                        runnerId.setText("");
                        password.setText("");
                        JOptionPane.showMessageDialog(this, "Registration Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "An error occurred while saving data.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Record Exists!", "Info", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        deleteBtn.addActionListener(e -> {
            try {
                String enteredIc = identityCard.getText().trim(); // Get IC from the search field

                if (enteredIc.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter an IC to delete.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Load all lines from the file
                List<String> vendorLines = Files.readAllLines(Paths.get("runnerRegistration.txt"));
                List<String> updatedLines = new ArrayList<>();
                boolean found = false;

                // Iterate through all lines to find the matching IC
                for (String line : vendorLines) {
                    String[] vendorParts = line.split("\\|");

                    // Assuming the IC is the second field (index 1)
                    if (vendorParts.length > 1 && vendorParts[1].trim().equals(enteredIc)) {
                        found = true; // Mark record as found
                    } else {
                        updatedLines.add(line); // Add non-matching lines to the updated list
                    }
                }

                if (found) {
                    int option = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to delete this record?",
                            "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (option == JOptionPane.YES_OPTION) {
                        // Write updated lines back to the file
                        Files.write(Paths.get("runnerRegistration.txt"), updatedLines);
                        JOptionPane.showMessageDialog(null, "Runner record deleted successfully.",
                                "Success", JOptionPane.INFORMATION_MESSAGE);

                        // Clear the form fields
                        identityCard.setText("");
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("Select");
                        vehicleType.setSelectedItem("Select");
                        vehicleNumber.setText("");
                        vehicleModel.setText("");
                        runnerId.setText("");
                        password.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given IC.",
                            "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "An error occurred while processing the file: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        updateBtn.addActionListener(e -> {
            try {
                String enteredIc = identityCard.getText().trim();

                if (enteredIc.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter an IC to modify.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                runner.setName(name.getText());
                runner.setIc(ic.getText());
                runner.setEmail(email.getText());
                runner.setPhoneNum(phone.getText());
                runner.setAddres(address.getText());
                runner.setDob(dob.getText());
                runner.setGender(gender.getSelectedItem().toString());
                runner.setVehicleType(vehicleType.getSelectedItem().toString());
                runner.setVehicleRegNum(vehicleNumber.getText());
                runner.setVehicleModel(vehicleModel.getText());
                runner.setPassword(new String(password.getPassword()));

                // Validate input
                if (runner.getName().isEmpty() || runner.getIc().isEmpty() || runner.getEmail().isEmpty() || runner.getPhoneNum().isEmpty()
                        || runner.getAddress().isEmpty() || runner.getGender().equals("Select") || runner.getDob().isEmpty() || runner.getVehicleType().equals("Select")
                        || runner.getVehicleRegNum().isEmpty() || runner.getVehicleModel().isEmpty() || runner.getPassword().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                List<String> runnerLines = Files.readAllLines(Paths.get("runnerRegistration.txt"));
                List<String> updatedLines = new ArrayList<>();
                boolean found = false;

                // Iterate through all lines to find the matching IC
                for (String line : runnerLines) {
                    String[] runnerParts = line.split("\\|");

                    if (runnerParts.length > 1 && runnerParts[1].trim().equals(enteredIc)) {
                        found = true;

                        String updatedRecord = runner.getName() + "|" + runner.getIc() + "|" + runner.getEmail() + "|" + runner.getPhoneNum() + "|"
                                + runner.getAddress() + "|" + runner.getDob() + "|" + runner.getGender() + "|" + runner.getVehicleType() + "|" + runner.getVehicleRegNum()
                                + "|" + runner.getVehicleModel() + "|" + runner.getPassword() + "|" + runnerParts[11].trim();
                        updatedLines.add(updatedRecord);
                    } else {
                        // Add non-matching lines to the updated list
                        updatedLines.add(line);
                    }
                }

                if (found) {
                    if (ic.getText().equals(enteredIc)) {
                        Files.write(Paths.get("runnerRegistration.txt"), updatedLines);
                        JOptionPane.showMessageDialog(null, "Record updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                        identityCard.setText("");
                        name.setText("");
                        ic.setText("");
                        email.setText("");
                        phone.setText("");
                        address.setText("");
                        dob.setText("");
                        gender.setSelectedItem("Select");
                        vehicleType.setSelectedItem("Select");
                        vehicleNumber.setText("");
                        vehicleModel.setText("");
                        runnerId.setText("");
                        password.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "IC cannot be modify.", "Upadate Record Fail", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given IC.", "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "An error occurred while processing the file: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Add panels and components
        runnerPanel.add(infoPanel, BorderLayout.NORTH);
        runnerPanel.add(this.btnPanel.add(btnPanel), BorderLayout.SOUTH);
        runnerPanel.add(leftPanel, BorderLayout.CENTER);
        runnerPanel.add(rightPanel, BorderLayout.EAST);

        return runnerPanel;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel label;
    private javax.swing.JButton runnerButton;
    private javax.swing.JButton vendorButton;
    // End of variables declaration//GEN-END:variables
}
