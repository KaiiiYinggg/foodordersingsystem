package foodorderingsystem;

import domain.OrderObject;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Manreen
 */
public class DL_Tasks extends javax.swing.JFrame {

    /**
     * Creates new form DeliveryRunner_Tasks
     */
    private List<String> tasks = new ArrayList<>(); // List to hold tasks
    private String filePath = "order.txt"; // File path for tasks
    private String username;
    OrderObject order = OrderObject.getInstance();

    public DL_Tasks() {
        initComponents();
        Login login = new Login();
        username = login.getUsername();
        
        
        ImageIcon img = new ImageIcon(getClass().getResource("/files/back.png"));
        Image scaledImage = img.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);
        back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DL_DashboardPage c = new DL_DashboardPage();
                c.setVisible(true);
                dispose();
            }
        });
        loadTable();
        back.setText("");
        back.setIcon(scaledIcon);
        setLocationRelativeTo(null);
    }

    //add holg login id
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_AcceptDeclineTasks = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel_Tasks = new javax.swing.JLabel();
        jRadioButton_AcceptTasks = new javax.swing.JRadioButton();
        jRadioButton_DeclineTasks = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Tasks = new javax.swing.JTable();
        jButton_UpdateTaskStatus = new javax.swing.JButton();
        jComboBox_CheckTaskHistory = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        taskArea = new javax.swing.JLabel();
        loadBtn = new javax.swing.JButton();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(204, 255, 193));

        jLabel_Tasks.setFont(new java.awt.Font("Sitka Text", 0, 36)); // NOI18N
        jLabel_Tasks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Tasks.setText("Tasks");

        jRadioButton_AcceptTasks.setBackground(new java.awt.Color(76, 211, 76));
        buttonGroup_AcceptDeclineTasks.add(jRadioButton_AcceptTasks);
        jRadioButton_AcceptTasks.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jRadioButton_AcceptTasks.setText("Accept Task");
        jRadioButton_AcceptTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_AcceptTasksActionPerformed(evt);
            }
        });

        jRadioButton_DeclineTasks.setBackground(new java.awt.Color(77, 214, 77));
        buttonGroup_AcceptDeclineTasks.add(jRadioButton_DeclineTasks);
        jRadioButton_DeclineTasks.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jRadioButton_DeclineTasks.setText("Decline Task");
        jRadioButton_DeclineTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_DeclineTasksActionPerformed(evt);
            }
        });

        jTable_Tasks.setBackground(new java.awt.Color(163, 204, 155));
        jTable_Tasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Customer Name", "Delivery Address", "Task Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Tasks.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTable_TasksComponentHidden(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Tasks);

        jButton_UpdateTaskStatus.setBackground(new java.awt.Color(77, 214, 77));
        jButton_UpdateTaskStatus.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jButton_UpdateTaskStatus.setText("Update Task Status");
        jButton_UpdateTaskStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateTaskStatusActionPerformed(evt);
            }
        });

        jComboBox_CheckTaskHistory.setBackground(new java.awt.Color(77, 214, 77));
        jComboBox_CheckTaskHistory.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jComboBox_CheckTaskHistory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Weekly", "Monthly", "Yearly" }));
        jComboBox_CheckTaskHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_CheckTaskHistoryActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel1.setText("Check Task History:");

        loadBtn.setBackground(new java.awt.Color(77, 214, 77));
        loadBtn.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        loadBtn.setText("Load Table");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        back.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Tasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(363, 363, 363)
                                .addComponent(jComboBox_CheckTaskHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_UpdateTaskStatus))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskArea, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jRadioButton_DeclineTasks, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(jRadioButton_AcceptTasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(loadBtn)
                        .addGap(285, 285, 285)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Tasks)
                    .addComponent(back))
                .addGap(66, 66, 66)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(taskArea, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_UpdateTaskStatus)
                    .addComponent(jRadioButton_AcceptTasks)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox_CheckTaskHistory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_DeclineTasks)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton_AcceptTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_AcceptTasksActionPerformed
        int selectedRow = jTable_Tasks.getSelectedRow();

        if (selectedRow != -1) { // Check if a task is selected
            String acceptedID = (String) jTable_Tasks.getValueAt(selectedRow, 0);
            String acceptedTask = (String) jTable_Tasks.getValueAt(selectedRow, 3);
            JOptionPane.showMessageDialog(this, "Task Accepted: " + acceptedTask);

            if (acceptedTask.equals("Order Prepared")) {
                updateTaskStatus("Order Accepted by Runner", acceptedID);
            } else {
                JOptionPane.showMessageDialog(this, "Warning: You can only accept the task which is in 'Order Prepared' status.",
                        "Cannot Accept Task", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a task to accept.");
        }
    }//GEN-LAST:event_jRadioButton_AcceptTasksActionPerformed


    private void jRadioButton_DeclineTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_DeclineTasksActionPerformed
        int selectedRow = jTable_Tasks.getSelectedRow(); // Get the selected row index

        if (selectedRow != -1) { // Check if a task is selected
            String declinedTask = (String) jTable_Tasks.getValueAt(selectedRow, 0);

            String acceptedID = (String) jTable_Tasks.getValueAt(selectedRow, 0);
            String acceptedTask = (String) jTable_Tasks.getValueAt(selectedRow, 3);
            
            if (acceptedTask.equals("Order Prepared")) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to decline: " + declinedTask + "?",
                        "Confirm Decline", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    removeTask(selectedRow);
                    JOptionPane.showMessageDialog(this, "Task Declined: " + declinedTask);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Warning: You can only accept the task which is in 'Order Prepared' status.",
                        "Cannot Accept Task", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a task to decline.");
        }
    }//GEN-LAST:event_jRadioButton_DeclineTasksActionPerformed

    private void jButton_UpdateTaskStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateTaskStatusActionPerformed
        int selectedRow = jTable_Tasks.getSelectedRow();
        if (selectedRow != -1) {
            String currentTask = (String) jTable_Tasks.getValueAt(selectedRow, 0);
            String currentStatus = (String) jTable_Tasks.getValueAt(selectedRow, 3); // Get current status

            // Prevent updating a completed task
            if (currentStatus.equals("Completed")) {
                JOptionPane.showMessageDialog(this, "Warning: You cannot update a Completed Task!", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Map<String, String> nextStatusMap = new HashMap<>();
            nextStatusMap.put("Order Accepted by Runner", "Food Pickup");
            nextStatusMap.put("Food Pickup", "Delivering");
            nextStatusMap.put("Delivering", "Completed");

            if (!nextStatusMap.containsKey(currentStatus)) {
                JOptionPane.showMessageDialog(this, "Invalid status update!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String nextStatus = nextStatusMap.get(currentStatus);

            updateTaskStatus(nextStatus, selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a task to update.");
        }

    }//GEN-LAST:event_jButton_UpdateTaskStatusActionPerformed

    private void jComboBox_CheckTaskHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_CheckTaskHistoryActionPerformed
        String selectedPeriod = (String) jComboBox_CheckTaskHistory.getSelectedItem(); // Get the selected item from the combo box
        displayTaskHistory(selectedPeriod); // Call the method to display tasks based on the selected period
    }//GEN-LAST:event_jComboBox_CheckTaskHistoryActionPerformed

    private void jTable_TasksComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable_TasksComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable_TasksComponentHidden

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        loadTable();
    }//GEN-LAST:event_loadBtnActionPerformed

    private void removeTask(int rowIndex) {
        DefaultTableModel model = (DefaultTableModel) jTable_Tasks.getModel();
        model.removeRow(rowIndex);
    }

    private void updateTaskStatus(String newStatus, String currentTask) {
        String filePath = "order.txt";
        List<String> updatedLines = new ArrayList<>();
        boolean taskFound = false;

        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));

            for (String line : lines) {
                String[] columns = line.split("\\|");

                if (columns.length > 4 && columns[0].trim().equals(currentTask.trim())) {
                    columns[6] = newStatus;
                    columns[11]= username;
                    taskFound = true;
                }

                updatedLines.add(String.join("|", columns));
            }

            if (taskFound) {
                Files.write(Paths.get(filePath), updatedLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
                JOptionPane.showMessageDialog(this, "Task status updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Task not found.");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating task: " + e.getMessage());
            e.printStackTrace();
        }

        loadTable();
    }

    private void updateTaskStatus(String newStatus, int selectedRow) {
        String filePath = "order.txt";
        List<String> updatedLines = new ArrayList<>();
        boolean taskFound = false;
        String currentTime = new SimpleDateFormat("HH:mm:ss").format(new Date());

        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                String[] columns = line.split("\\|");

                if (columns.length > 10 && columns[0].trim().equals(jTable_Tasks.getValueAt(selectedRow, 0).toString().trim())) {
                    System.out.println("Updating task: " + columns[0] + " to " + newStatus + " at " + currentTime);
                    columns[6] = newStatus;
                    columns[10] = currentTime;
                    columns[11] = username;
                    taskFound = true;
                }
                updatedLines.add(String.join("|", columns));
            }

            if (taskFound) {
                Files.write(Paths.get(filePath), updatedLines, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);

                jTable_Tasks.setValueAt(newStatus, selectedRow, 3);

                JOptionPane.showMessageDialog(this, "Task status updated successfully.");
                Thread.sleep(300);
                loadTable();
            } else {
                JOptionPane.showMessageDialog(this, "Task not found.");
            }
        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(this, "Error updating task: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void loadTable() {
        DefaultTableModel model = (DefaultTableModel) jTable_Tasks.getModel();
        model.setRowCount(0); // Clear table data

        File file = new File("order.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File not found: " + file.getAbsolutePath());
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\\|");
                if (data.length >= 13) { // Ensure correct data format
                    String status = data[6];
                    if ((!data[6].equals("Pending") && !data[6].equals("Accepted") && !data[6].equals("Cancelled") && !data[6].equals("Completed")) && data[4].equals("Delivery")) {
                        model.addRow(new Object[]{data[0], data[12], data[9], data[6], data[7]});
                    }
                    
                    if ("Order Prepared".equals(status)) {
                        order.playSound(MenuForm.class.getResource("/files/new order.wav"));
                    }
                }

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading orders: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Method to display task history based on the selected period
    //add parameter runner id
    private void displayTaskHistory(String period) {
        // Clear the current table
        DefaultTableModel model = (DefaultTableModel) jTable_Tasks.getModel();
        model.setRowCount(0); // Clear existing rows

        // Read tasks from the text file
        try (BufferedReader br = new BufferedReader(new FileReader("order.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\\|"); // Assuming "/" is the delimiter for your data
                String taskDate = data[7];

                // Filter tasks based on the selected period
                if (isTaskInPeriod(taskDate, period)) {
                    if ((data[6].equals("Completed")) && data[4].equals("Delivery")) {
                        model.addRow(new Object[]{data[0], data[12], data[9], data[6], data[7]});
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading tasks file.");
        }
    }

    // Method to check if the task date falls within the selected period
    private boolean isTaskInPeriod(String taskDate, String period) {
        // Assuming taskDate is in the format "yyyy-MM-dd"
        LocalDate date = LocalDate.parse(taskDate); // Parse the date string to LocalDate
        LocalDate today = LocalDate.now();

        switch (period) {
            case "Daily":
                return date.isEqual(today);
            case "Weekly":
                return !date.isBefore(today.minusWeeks(1)) && !date.isAfter(today);
            case "Monthly":
                return !date.isBefore(today.minusMonths(1)) && !date.isAfter(today);
            case "Yearly":
                return !date.isBefore(today.minusYears(1)) && !date.isAfter(today);
            default:
                return false;
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.ButtonGroup buttonGroup_AcceptDeclineTasks;
    private javax.swing.JButton jButton_UpdateTaskStatus;
    private javax.swing.JComboBox<String> jComboBox_CheckTaskHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Tasks;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton_AcceptTasks;
    private javax.swing.JRadioButton jRadioButton_DeclineTasks;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Tasks;
    private javax.swing.JButton loadBtn;
    private javax.swing.JLabel taskArea;
    // End of variables declaration//GEN-END:variables

    private void displayTask() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
